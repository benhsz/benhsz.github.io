<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Categories on Not Without Purpose</title><link>https://benhsz.github.io/categories/</link><description>Recent content in Categories on Not Without Purpose</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://benhsz.github.io/categories/index.xml" rel="self" type="application/rss+xml"/><item><title>What Is Good Design?</title><link>https://benhsz.github.io/what-is-good-design/</link><pubDate>Thu, 30 Dec 2021 12:18:31 +0100</pubDate><guid>https://benhsz.github.io/what-is-good-design/</guid><description>&lt;p>Whenever I write about design on this blog, it is specifically about what users get to experience. You can call that user experience design or user-centered design. With that in mind, let&amp;rsquo;s proceed.&lt;/p>
&lt;p>Say you were taking a stroll in the forest when, suddenly, you injure your leg, and it has become difficult to walk. By sheer cosmic coincidence, you notice a thick branch on the ground strong enough to serve as a crutch. After trying it out as a crutch, you notice it is impractical to hold onto. After doing a bit of crafting with a pocket knife, it became easier to use, allowing you to hobble your way back home.&lt;/p>
&lt;p>I&amp;rsquo;d say that&amp;rsquo;s about it. The act of crafting that branch into a crutch was design. Personally, I don&amp;rsquo;t find the definition of design to be particularly interesting. Good design on the other hand.&lt;/p>
&lt;blockquote>
&lt;p>Good design serves well.&lt;/p>
&lt;/blockquote>
&lt;p>What does it mean to serve well? It is understood that design fulfills a purpose. If it does that well, then is that good design?&lt;/p>
&lt;p>There can be problems with the design that go beyond simply not achieving its purpose. Unexpected, negative consequences may result.&lt;/p>
&lt;h1 id="problematic-design">Problematic Design&lt;/h1>
&lt;p>When is a design problematic? Suppose you were designing a videogame. At the very least, the videogame should be engaging. During the development, it&amp;rsquo;s possible the game fails to be engaging. Is that problematic? Well, it doesn&amp;rsquo;t filfull its purpose, and therefore, it&amp;rsquo;s not good design. But it&amp;rsquo;s possible for it to achieve its purpose, and also not be good design.&lt;/p>
&lt;p>Suppose the videogame is finished and the end product is as engaging as you had hoped. The game sold very well. They&amp;rsquo;re even talking about it on the news. But wait. These news reports are about&amp;hellip; deeply frustrated players throwing their controllers at the screen with such velocity that it destroys their television. Ah, well, sometimes, videogames can be a bit frustrating! Unfortunately, the reason why this became a news report, is that it seems to be happening an awful lot with &lt;em>this&lt;/em> particular videogame. Not before long, it is known as &lt;em>that game&lt;/em>, the game that causes so many people to obliterate their property in fits of rage and frustration.&lt;/p>
&lt;p>Is this problematic? It&amp;rsquo;s starting to sound like it. Does that mean you cannot consider this videogame to be good design, despite filfulling its purpose? At which point, exactly, do you decide that the design is problematic? These are difficult questions to answer.&lt;/p>
&lt;p>Design serves. Good design serves well.&lt;/p>
&lt;p>Are the people in the above example served well? They dealt with frustration. Other designs could lead to more severe problems, such as environmental degradation. If a design&amp;rsquo;s purpose is achieved well, it serves well. But if that same design is problematic, &lt;strong>there is a disservice&lt;/strong>. If that disservice is severe enough, the positive aspects will be negated. If so, you will have served, but not served well.&lt;/p>
&lt;h1 id="the-user">The User&lt;/h1>
&lt;p>Good design is exceptionally difficult. Why is that? In no small part, it is because user-centered design concerns itself with design for human beings, and human beings are terribly complicated.&lt;/p>
&lt;p>I&amp;rsquo;ve wondered: Would designing for a simpler creature make things easier? Maybe. But what is a simpler creature? Even creatures that you could think of as simple, like ants, demonstrate complex behavior. They, like us, underwent evolutionary processes over a vast period of time. If that&amp;rsquo;s what&amp;rsquo;s responsible for the complexity, then good design for any living thing at all is bound to be a difficult endeavor.&lt;/p></description></item><item><title>My Answer to The Parenthesis Problem</title><link>https://benhsz.github.io/my-answer-to-the-parenthesis-problem/</link><pubDate>Tue, 16 Nov 2021 15:48:31 +0200</pubDate><guid>https://benhsz.github.io/my-answer-to-the-parenthesis-problem/</guid><description>&lt;p>As I wrote in the &lt;a href="https://benhsz.github.io/the-parenthesis-problem">previous post&lt;/a>, the solution to the problem is to have the editor visualize the code a certain way while having the programmer&amp;rsquo;s inputs, and the programming language syntax, remain the same.&lt;/p>
&lt;p>The idea I present here takes advantage of the fact that there are temporary and interactive aspects to code. When code is not yet finished you might have opening parentheses that have no closing counterparts. Assuming the code is finished, and has the usual formatting, the editor would change the code&amp;rsquo;s appearance as follows.&lt;/p>
&lt;pre>&lt;code>(define (factorial n)
(if (zero? n)
1
(* n (factorial (sub1 n)))))
ðŸ¡«
define (factorial n)
if |zero? n
1
|* n (factorial (sub1 n)
&lt;/code>&lt;/pre>
&lt;p>If unfinished or incorrectly indented, the editor would make the code look a certain way. The &amp;lsquo;finished&amp;rsquo; look above builds on that. This makes many parentheses visually obsolete and lets the text&amp;rsquo;s formatting do the job. The unseen parentheses enable the editor to provide such visualizations.&lt;/p>
&lt;h1 id="in-detail">In Detail&lt;/h1>
&lt;p>What the finished look does specifically:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Remove the &amp;lsquo;outer&amp;rsquo; parentheses:&lt;/p>
&lt;pre>&lt;code> (define X 5)
(define Y 4)
(define Z (+ 2 3))
define X 5
define Y 4
define Z (+ 2 3)
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>Abstract pile-ups of closing parentheses occurring at the end of the line into one closing parenthesis:&lt;/p>
&lt;pre>&lt;code> (add1 (add1 (add1 (add1 (add1 0)))))
add1 (add1 (add1 (add1 (add1 0)
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>Make parentheses appear as bars if:&lt;/p>
&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>They are part of a &amp;lsquo;list-like&amp;rsquo; format (for lack of a better term) and&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Their respective closing parenthesis is at the end of the same line:&lt;/p>
&lt;pre>&lt;code>(if (zero? n)
(add1 n)
(sub1 n))
if |zero? n
|add1 n
|sub1 n
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ol>
&lt;p>The unfinished look gives opening parentheses with no closing counterpart a different shape.&lt;/p>
&lt;p>&lt;img src="https://benhsz.github.io/images/lbp/add1.gif" alt="add1 gif">&lt;/p>
&lt;p>The incorrect indentation look provides visual cues to point out any incorrect or atypical indentation.&lt;/p>
&lt;pre>&lt;code> (define X 5)
(define Y 4)
(define Z (+ 2 3))
define X 5
â†’ define Y 4
â†’ define Z (+ 2 3)
&lt;/code>&lt;/pre>
&lt;p>The availability of these visualizations makes the &lt;a href="https://benhsz.github.io/images/lbp/lbp.png">finished look&lt;/a> possible.&lt;/p>
&lt;p>&lt;img src="https://benhsz.github.io/images/lbp/factorial.gif" alt="factorial gif">&lt;/p>
&lt;h1 id="questions">Questions&lt;/h1>
&lt;p>&lt;strong>Implementation&amp;hellip;?&lt;/strong>&lt;br>
I can&amp;rsquo;t say when I&amp;rsquo;ll get around to implementing what I&amp;rsquo;ve described, as I&amp;rsquo;m an inexperienced programmer. That said, anyone interested in implementing, copying or modifying this proposal is free to do so.&lt;/p>
&lt;p>&lt;strong>How to edit such code?&lt;/strong>&lt;br>
If you would previously edit some code by finding the appropriate closing parens in a massive pile-up of &lt;code>))))))&lt;/code>, where would you now place the cursor? This means the editing experience changes a bit. One possible solution is to have parentheses show up where you put the cursor, essentially toggling back to the text view for that particular line of code.&lt;/p>
&lt;p>It&amp;rsquo;s likely that for users of editing tools like paredit, the editing experience would remain the same.&lt;/p>
&lt;p>&lt;strong>What to call an implementation of this proposal?&lt;/strong>&lt;br>
The project name for this idea was Lisp Beyond Parentheses, but I think an implementation should have a more descriptive name.
I would consider calling it Adaptive Code Visualization.&lt;/p></description></item><item><title>The Parenthesis Problem</title><link>https://benhsz.github.io/the-parenthesis-problem/</link><pubDate>Tue, 16 Nov 2021 15:45:31 +0200</pubDate><guid>https://benhsz.github.io/the-parenthesis-problem/</guid><description>&lt;p>&lt;img src="https://benhsz.github.io/images/lbp/keyboard.jpg" alt="keyboard image">&lt;/p>
&lt;p>Lisp, referring to the category of programming languages, uses lists to do computer programming. In order for this to be useful, many lists are needed. And not just a succession of lists; items in a list can be another list, and &lt;em>that&lt;/em> list could contain another list.&lt;/p>
&lt;p>Programming in Lisp, short for List Processing, means having many lists appear on the programmer&amp;rsquo;s screen. To know where lists begin and end, the notation for these lists involves parentheses. The result: parentheses absolutely &lt;em>everywhere&lt;/em>. This is problematic, because after a certain point it can become difficult to understand what&amp;rsquo;s going on.&lt;/p>
&lt;p>Few programming languages in common use work like this. Commonly used programming languages, like Python, JavaScript, C, don&amp;rsquo;t use this kind of syntax. And so, they don&amp;rsquo;t have this kind of problem.&lt;/p>
&lt;p>With this problem being unique to Lisp, why bother with Lisp? The answer is that having a programming language syntax work this way brings all sorts of unique advantages with it. Indeed, much has been written about &lt;!-- raw HTML omitted -->this. &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> &lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> &lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>&lt;!-- raw HTML omitted -->&lt;br>
This is why Lisp continues to see some use today in various forms, despite the parenthesis problem.&lt;/p>
&lt;p>Attempts have been made to solve this problem by changing the syntax. But the syntax isn&amp;rsquo;t the problem. The problem concerns itself with having a certain kind of information (code), and the need to communicate the meaning of this information to the user. Rather than inundate the user with parentheses, something else should be shown. Something that&amp;rsquo;s easier to understand. The question is: what is that thing? What is the alternative view to this type of computer code?&lt;/p>
&lt;h1 id="problem-solving">Problem-solving&lt;/h1>
&lt;p>Computer programming is done on a computer, and editing programs are used for that purpose. These programs display the code that is being worked on.&lt;/p>
&lt;p>Rather than change the code, the idea is to change how the code is displayed in the editor&amp;hellip;&lt;/p>
&lt;p>Let&amp;rsquo;s make an attempt to solve this problem by experimenting on a sample of code.&lt;/p>
&lt;pre>&lt;code>(define (factorial n)
(if (zero? n)
1
(* n (factorial (sub1 n)))))
&lt;/code>&lt;/pre>
&lt;p>If the parentheses present such difficulty, why not just&amp;hellip; &lt;em>not&lt;/em> visualize them?&lt;/p>
&lt;pre>&lt;code> define factorial n
if zero? n
1
* n factorial sub1 n
&lt;/code>&lt;/pre>
&lt;p>Well. That was easy.&lt;/p>
&lt;p>But wait. What if I forget to type the parentheses? What if I type a closing instead of opening parenthesis? That sort of thing would entirely change the meaning of the code, and I wouldn&amp;rsquo;t be able to tell the difference.&lt;/p>
&lt;p>Let&amp;rsquo;s continue on a screenshot of code so we can tweak the image any way we want. Rather than replace parentheses with blank characters, how about we just reduce or minimize the shapes, by replacing them with, say, dots?&lt;/p>
&lt;p>&lt;img src="https://benhsz.github.io/images/lbp/code-dots.png" alt="code image">&lt;/p>
&lt;p>That&amp;rsquo;s better, but&amp;hellip; that still doesn&amp;rsquo;t solve the problem of not knowing when something starts or ends. We&amp;rsquo;re going to need symbols that are distinct.&lt;/p>
&lt;p>So instead of dots, how about half circle shapes.&lt;/p>
&lt;p>&lt;img src="https://benhsz.github.io/images/lbp/code-halfcircles.png" alt="code image with half circles">&lt;/p>
&lt;p>Now we&amp;rsquo;re getting somewhere.&lt;/p>
&lt;p>This is an alternative, but we need to remember we&amp;rsquo;re not just looking for an alternative. We&amp;rsquo;re looking for something that&amp;rsquo;s strictly better than what we had before. Is this really better? Now that I look at this example a bit more, I&amp;rsquo;m noticing it&amp;rsquo;s a bit difficult to read. I can&amp;rsquo;t tell whether that half circle shape is opening or closing without examining it carefully. Maybe the shapes are just a bit too small.&lt;/p>
&lt;p>So first we got rid of parentheses entirely, and while that seemed nice at first, all that did was turn the &amp;lsquo;too much information&amp;rsquo; problem into a &amp;lsquo;not enough information&amp;rsquo; problem. Changing them into dots nearly worked, but it became clear we needed something that would also tell us where something starts and ends. Taking that into account, the dots needed to be distinct, so we ended up with half circle shapes. While what we have now is promising, it&amp;rsquo;s not quite satisfactory because those half circle shapes are just a bit too small. It would seem the last step is to simply make them larger.&lt;/p>
&lt;p>How about making them about the same size as the other characters?&lt;/p>
&lt;p>If that&amp;rsquo;s the last problem we need to solve, the final result could be the alternative view to the code we&amp;rsquo;ve been looking fo&amp;ndash;&lt;/p>
&lt;p>&lt;img src="https://benhsz.github.io/images/lbp/code-largecircles.png" alt="image with big half circles">&lt;/p>
&lt;h1 id="fail">Fail&lt;/h1>
&lt;p>&lt;strong>Wow&lt;/strong>. Okay, that did not work at all. All we ended up doing was recreate parentheses. An ugly, clumsy version of parentheses at that.&lt;/p>
&lt;p>I don&amp;rsquo;t get it. I appreciate useful things. If visualizing parentheses is useful, why does the sight of them vex me so? Where is this feeling of dissatisfaction coming from?&lt;/p>
&lt;p>Maybe that failed attempt just wasn&amp;rsquo;t radical enough. Rather than try to replace the parentheses with different characters, perhaps the answer is to render something &lt;em>completely&lt;/em> different. By drawing circles on the screen to represent lists, for example. Sure, you&amp;rsquo;d end up with lots of circles on the screen, and it would probably be way worse than parentheses, but it&amp;rsquo;s evidence an alternative view is possible. What other alternative views are there? Which can produce the desired result?&lt;/p>
&lt;p>This reasoning may seem odd, but I happen to believe that the feeling of dissatisfaction is in fact evidence that the solution already exists. It just needs to be found.&lt;/p>
&lt;h1 id="several-attempts-later">Several Attempts Later&amp;hellip;&lt;/h1>
&lt;p>Submitted for your approval: &lt;a href="https://benhsz.github.io/my-answer-to-the-parenthesis-problem">My Answer to The Parenthesis Problem&lt;/a>&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;em>Why Lisp?&lt;/em> &lt;a href="http://blog.rongarret.info/2015/05/why-lisp.html">http://blog.rongarret.info/2015/05/why-lisp.html&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>&lt;em>How Lisp Became God&amp;rsquo;s Own Programming Language&lt;/em>&lt;br>
&lt;a href="https://twobithistory.org/2018/10/14/lisp.html">https://twobithistory.org/2018/10/14/lisp.html&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>&lt;em>An Intuition for Lisp Syntax&lt;/em> &lt;a href="https://stopa.io/post/265">https://stopa.io/post/265&lt;/a>&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>I have my own idea of what I think the biggest advantage of Lisp is, which I may write about in the future.&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Making a Website in 2021</title><link>https://benhsz.github.io/making-a-website-in-2021/</link><pubDate>Wed, 13 Oct 2021 17:41:10 +0200</pubDate><guid>https://benhsz.github.io/making-a-website-in-2021/</guid><description>&lt;p>Search for it on the internet, and there&amp;rsquo;s no shortage of results that will tell you just how easy it is to create a website. You may feel like you don&amp;rsquo;t know enough about how websites work, but that&amp;rsquo;s okay. You can create a website without needing to know &lt;em>anything&lt;/em> about how a website works. Making a website today is easier than ever!&lt;/p>
&lt;p>The first thing I asked myself was what kind of a website I wanted to have. This was easy to answer. Some kind of blog, where I could just post my rambling thoughts. A blog like any other blog. A simple blog. Mostly text, with the occasional image sprinkled in.&lt;/p>
&lt;p>Then I thought about where I could host this website. As a beginner programmer, I came upon &lt;a href="https://pages.github.com/">GitHub Pages&lt;/a>. On the GitHub Pages website, there&amp;rsquo;s a little introduction video that explains that creating a website can be a hassle, even for those with the know-how. But not to worry. With GitHub Pages, it&amp;rsquo;s a lot easier. Indeed, there are many services like GitHub Pages that offer a similar message. I even came upon a website that boasted you could get everything up and running in just 5 minutes.&lt;/p>
&lt;p>After deciding to go with GitHub Pages, I had to choose a theme. This step would be easy, I thought. I was looking for something &lt;em>simple&lt;/em>. Something that focused on text. Something that people would find easy to read. Thus I began to try out some themes.&lt;/p>
&lt;p>It didn&amp;rsquo;t take long for the dissatisfaction to set in with the themes I had available to me. Actually selecting a theme was effortless; all you had to do was navigate to the appropriately-named Theme Chooser and, just, like, pick a theme, yo. But strangely, I found that none of the available themes were particularly good. Even the one literally named &amp;lsquo;minimalist&amp;rsquo;.&lt;/p>
&lt;h1 id="keep-it-simple">Keep It Simple&lt;/h1>
&lt;p>At this point, I began to consider an alternative. I recall visiting some website that was like a blog, but it didn&amp;rsquo;t seem to have a design. It had an old-fashioned look, like it was made in another, previous age of the internet. The font would default to Times New Roman (on Windows), and text would render as wide as the browser window was wide. I thought: maybe I should forget all this theme nonsense and go down that road.&lt;/p>
&lt;p>But I decided against it. In this day and age, people have certain expectations of a website, and it&amp;rsquo;s better to just meet to those expectations. Further, as I had desktop viewers in mind, &lt;!-- raw HTML omitted -->text rendering as wide as the browser window&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> was a big no-no for me.&lt;!-- raw HTML omitted --> Perhaps in the past, when desktop computers had small 14 inch screens, this was acceptable. In this age of large wide-screen and ultra-wide-screen monitors though, it would be too annoying to deal with. Better it is to just keep searching for the right theme, I decided.&lt;/p>
&lt;p>The GitHub Pages documentation explained that you can choose from more themes if you installed Jekyll. I may have read some blogs where it said it was made with Jekyll. What &lt;em>is&lt;/em> Jekyll? A static site generator, you say?&lt;/p>
&lt;p>And down that rabbit hole I went. But before I installed Jekyll, I was curious to see some previews of those &amp;lsquo;more themes&amp;rsquo; that GitHub Pages did not offer out of the box.&lt;/p>
&lt;h1 id="any-theme-you-like">Any Theme You Like&lt;/h1>
&lt;p>While searching for Jekyll themes, I became more curious about other static site generators. &lt;!-- raw HTML omitted -->How many of these static site generators are there?&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;!-- raw HTML omitted --> How do they work? What, exactly, do they do? Is Jekyll &amp;lsquo;the best one&amp;rsquo;? Are static site generators necessary if you just want a simple blog?&lt;/p>
&lt;p>As I continued to browse for themes, I again became dissatisifed. There was no shortage of &amp;lsquo;snazzy&amp;rsquo; themes, but what about simple themes? Unimpressed, and increasingly curious, I began to take a peek at themes for other SSG&amp;rsquo;s, such as Hugo and Zola.&lt;/p>
&lt;p>While browsing Hugo themes, I found myself enjoying it more than when I looked at Jekyll themes. Everything just looked nicer. Looking back at it now, I wonder why that is. Hugo is newer than Jekyll. Perhaps themes are just a bit more modern-looking as a result. I&amp;rsquo;m not entirely sure what the reason is. In any case, I eventually found a theme I liked.&lt;/p>
&lt;p>Then I began second-guessing. Is this really what I want? Maybe I should keep looking. As someone with more self-awareness than what&amp;rsquo;s good for me, I was acutely aware of just &lt;em>how much time&lt;/em> I was wasting looking for a theme.&lt;/p>
&lt;p>I began to ask myself: how many hours over the course of several days have I wasted already? What the heck is going on here? Just pick a theme, dumbass! It doesn&amp;rsquo;t matter! Focus on starting the blog. You can always change the theme later.&lt;/p>
&lt;p>That&amp;rsquo;s right. I can always change the theme later. Knowing that, why is it still so hard to choose something?&lt;/p>
&lt;p>If I had to buy new furniture, I would have a hard time choosing, because once I&amp;rsquo;ve had something delivered, I can&amp;rsquo;t just snap my fingers and change it to something else. And furniture ain&amp;rsquo;t free. Having difficulty deciding in that case would make sense.&lt;/p>
&lt;p>So why would choosing a theme be this difficult? I already knew that when confronted with lots of choice, people act weird. But I haven&amp;rsquo;t studied this &lt;!-- raw HTML omitted -->issue&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>&lt;!-- raw HTML omitted --> carefully.&lt;/p>
&lt;h1 id="hold-the-serifs-please">Hold the Serifs, Please&lt;/h1>
&lt;p>Having browsed a multitude of themes, it slowly became clear what I was looking for. Single-column, sans serif, dark text on &lt;!-- raw HTML omitted -->a white background.&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>&lt;!-- raw HTML omitted --> The font choice especially seemed to have the largest effect on the overall look of the site. That makes sense, given that what I was interested in dealt with text, not photographs or videos.&lt;/p>
&lt;p>The difference between a serif and sans serif font is interesting. My own understanding&amp;ndash;having no education in typography or what have you&amp;ndash;is that serif fonts are just more intricate looking, and have a certain feel that suits story-telling. Sans serif is for stuff that&amp;rsquo;s more to the point.&lt;/p>
&lt;p>On one hand, I was interested in telling stories. But I also wanted to just get to the point. I guess the story-telling I wanted to do, was more like giving explanations, rather than a &lt;em>Once upon a time&amp;hellip;&lt;/em> sort of thing.&lt;br>
I decided to restrict my search for themes with sans serif fonts.&lt;/p>
&lt;p>(It&amp;rsquo;s technically possible to customize a theme&amp;rsquo;s font settings. Having already spent hours searching for a theme, I feared I would spend even longer customizing a theme to my liking, and quickly decided against it.)&lt;/p>
&lt;p>Unfortunately, the websites on which I browsed for themes didn&amp;rsquo;t seem to have any options that let you search for something based on fonts, or layout even. I could only find a highly general search setting, such as &amp;lsquo;Blog&amp;rsquo; or &amp;lsquo;Minimalist&amp;rsquo;. It seems WordPress does let you search for layout, but also has no serifs/sans serifs option.&lt;/p>
&lt;p>So I decided to first focus on one-column layouts, which I could browse for by just paying attention to the thumbnail images, then manually filter out the ones with serif fonts from my list.&lt;/p>
&lt;p>More time passed. And, at long last, &lt;!-- raw HTML omitted -->I managed to settle on a theme.&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>&lt;!-- raw HTML omitted --> Somehow.&lt;/p>
&lt;h1 id="lift-off">Lift-off&lt;/h1>
&lt;p>Now that we&amp;rsquo;re up in the air, you might ask: were the claims true, that making a website today is easier than ever?&lt;/p>
&lt;p>In order to use Hugo instead of Jekyll with GitHub Pages, a bit more configuration than usual was needed. In the last few steps I undertook, my mind yet reeled from having dealt with such an endless sea of choice.&lt;br>
The dissatisfaction. The second-guessing. The agonizing. How I endlessly, endlessly browsed for themes!&lt;/p>
&lt;p>Fortunately, a quick search on the internet told me all the configuration I needed to know. Why, it would take no more than a few minutes.&lt;br>
So, to answer the question: was it easy?&lt;/p>
&lt;p>Yes. I suppose it was.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Firefox has a feature called &lt;a href="https://support.mozilla.org/en-US/kb/firefox-reader-view-clutter-free-web-pages">Reader View&lt;/a> that could come in handy in such situations, but I always forget to use it whenever I come across a webpage where it could be useful.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>&lt;a href="https://jamstack.org/generators/">A surprising amount.&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/The_Paradox_of_Choice">https://en.wikipedia.org/wiki/The_Paradox_of_Choice&lt;/a>&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>There are themes that default to a certain background but can take user preferences into account, should a user preference be detected. &lt;a href="https://github.com/LukasJoswiak/etch">What I&amp;rsquo;m using&lt;/a> at the time of writing is such a theme.&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5" role="doc-endnote">
&lt;p>I like it well enough. The links are my favorite part. There&amp;rsquo;s just nothing that says &amp;lsquo;hyperlink&amp;rsquo; quite like beautiful bright blue text. It seems in the end I did go for something old-fashioned after all.&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>The Struggle with Prefix Syntax</title><link>https://benhsz.github.io/the-struggle-with-prefix-syntax/</link><pubDate>Sun, 10 Oct 2021 22:34:39 +0200</pubDate><guid>https://benhsz.github.io/the-struggle-with-prefix-syntax/</guid><description>&lt;p>If you&amp;rsquo;re programming in a Lisp-family programming language, working with
numbers is going to be a little bit different.&lt;/p>
&lt;p>Some might say that, while it may seem odd at first, you can get used to it.&lt;br>
That is to say, it&amp;rsquo;s not bad. Just&amp;hellip; different.&lt;/p>
&lt;p>Prefix means that where you would normally have the operator between operands,
you would have only one operator at the very beginning.&lt;/p>
&lt;p>In my experience, this is fine for when you need to add or multiply. For some reason that isn&amp;rsquo;t
confusing at all; it really is just nothing more than &lt;em>different.&lt;/em>&lt;/p>
&lt;p>But for other things like greater-than, less-than, minus, it&amp;rsquo;s not so simple.
When I started out programming in Lisp, I thought prefix syntax seemed to present only a minor difficulty. But now that some time has passed, I&amp;rsquo;ve given some thought to my experience with it.&lt;/p>
&lt;p>And it&amp;rsquo;s actually mind-boggling how confusing it is.&lt;/p>
&lt;p>For example.&lt;/p>
&lt;p>&lt;code>(- 3 2)&lt;/code>&lt;/p>
&lt;p>I would read this as &amp;ldquo;minus three two&amp;rdquo;.&lt;/p>
&lt;p>Hang on. Let me try to read that again.&lt;/p>
&lt;p>&lt;code>(- 3 2)&lt;/code>&lt;/p>
&lt;p>Minus&amp;hellip; three&amp;hellip; two.&lt;/p>
&lt;p>But wait. &lt;em>What&lt;/em> minus three? And then there&amp;rsquo;s that two&amp;hellip;&lt;/p>
&lt;p>So is it two minus three?&lt;/p>
&lt;p>Nope.&lt;/p>
&lt;h3 id="minus-three-two--three-minus-two">Minus Three Two = Three Minus Two&lt;/h3>
&lt;p>&lt;img src="https://i.imgur.com/zeJrmc8.gif" alt="Huh gif">&lt;/p>
&lt;p>I now realize it&amp;rsquo;s almost impossible to get used to because, when reading the code from left to right (as code is usually read) it
partially reads like infix notation. So it&amp;rsquo;s not that it&amp;rsquo;s different. It&amp;rsquo;s that it&amp;rsquo;s not different &lt;em>enough&lt;/em>.&lt;/p>
&lt;p>There is a way to avoid the confusion though. But we need to read it step-by-step.
First the operator, then the operands:&lt;/p>
&lt;p>&lt;code>-&lt;/code>&lt;/p>
&lt;p>&amp;ldquo;Minus.&amp;rdquo; (Hyphen, actually. But we&amp;rsquo;re just gonna have to roll with it.)&lt;/p>
&lt;p>This means we&amp;rsquo;re dealing with subtraction, so let&amp;rsquo;s see what comes after that.&lt;/p>
&lt;p>&lt;code>3 2&lt;/code>&lt;/p>
&lt;p>&amp;ldquo;Three two.&amp;rdquo;&lt;/p>
&lt;p>Now imagine the operator between the numbers.&lt;/p>
&lt;p>&amp;ldquo;Three minus two.&amp;rdquo;&lt;/p>
&lt;p>There we go.&lt;/p>
&lt;p>And if you have more numbers, like&lt;/p>
&lt;p>&lt;code>(- 9 3 2)&lt;/code>&lt;/p>
&lt;p>It should be read as &amp;ldquo;minus&amp;rdquo;&amp;hellip; &amp;ldquo;nine minus three minus two.&amp;rdquo;&lt;/p>
&lt;p>And you do this with other operators too, like&lt;/p>
&lt;p>&lt;code>(&amp;gt; X Y)&lt;/code>&lt;/p>
&lt;p>This should not be read as &amp;ldquo;greater than X Y&amp;rdquo;, which can leave you wondering: &lt;em>what&lt;/em> is greater than X? And what&amp;rsquo;s
that Y doing there?! Is Y greater than X?&lt;br>
No, no, no.&lt;/p>
&lt;p>Don&amp;rsquo;t read it left to right in one go! Oh, sure, you can read all other code left to right in one go, but not this part.&lt;/p>
&lt;p>Just repeat the previous steps. &amp;ldquo;Greater than&amp;rdquo;, take a look what you&amp;rsquo;ve got (X Y), and then&amp;hellip; &amp;ldquo;X greater than Y.&amp;rdquo;&lt;/p>
&lt;p>See? That wasn&amp;rsquo;t so bad.&lt;/p>
&lt;p>Well, actually, that was pretty bad.
It may not seem like too much ask here, but that&amp;rsquo;s because we&amp;rsquo;re forgetting the context.
A thing such as &lt;code>(&amp;gt; X Y)&lt;/code> is problematic when it is involved in a train of thought. That is, when you&amp;rsquo;re busy thinking about code.
And that&amp;rsquo;s practically always going to be the case.&lt;/p>
&lt;blockquote>
&lt;p>Let&amp;rsquo;s see here. If X is greater than Y, then&amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>(&amp;gt; X Y)&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>Wait&amp;hellip; greater than&amp;hellip;&lt;/p>
&lt;p>Yeah. Okay. So&amp;hellip;&lt;/p>
&lt;p>No, hang on. Greater than&amp;hellip; X? Y. Wait, what?&lt;/p>
&lt;/blockquote>
&lt;p>Train of thought: derailed.&lt;/p>
&lt;p>I know how prefix syntax is supposed to work at this point, so it&amp;rsquo;s not difficult to start typing &lt;code>(&amp;gt; X Y)&lt;/code>. But there is that small moment of second-guessing that happens when confronted with the sight of &lt;code>&amp;gt; X Y&lt;/code>, and that moment is
enough to screw me over.&lt;/p>
&lt;p>There&amp;rsquo;s no getting used to it. Instead, you just get used to having your train of thought messed up once in a while; or catch a lucky break when you only have to add or multiply.&lt;/p>
&lt;p>There might be a way to solve this problem though.&lt;/p>
&lt;h1 id="infix-readings">Infix Readings&lt;/h1>
&lt;p>The idea I propose here doesn&amp;rsquo;t involve changing the notation, but rather involves the editor, and
what it can do to make prefix syntax easier to read.&lt;/p>
&lt;p>Before I explain further, have a gander at these examples.&lt;/p>
&lt;p>If you read this
&lt;code>- 3 2&lt;/code>
as &amp;ldquo;minus three two.&amp;rdquo;&lt;/p>
&lt;p>Then the following would be read as &lt;code> -3 2&lt;/code> &amp;ldquo;minus three, two.&amp;rdquo;&lt;/p>
&lt;p>And &lt;code>-3 -2&lt;/code> as &amp;ldquo;minus three, minus two.&amp;rdquo;&lt;/p>
&lt;p>And &lt;code>- 3 - 2&lt;/code> as &amp;ldquo;minus three minus two.&amp;rdquo;&lt;/p>
&lt;p>Then, perhaps, the following could be read as&amp;hellip;?&lt;/p>
&lt;p>&lt;code>- ... 3 - 2&lt;/code>&lt;/p>
&lt;p>&amp;ldquo;Minus, three minus two.&amp;rdquo;&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;em>Bringo.&lt;/em>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>Here&amp;rsquo;s what I propose the editor should do:&lt;/p>
&lt;ol>
&lt;li>Visually separate the first operator from the rest&lt;/li>
&lt;li>Create more space between the operands by doing a bit of padding&lt;/li>
&lt;li>Fill the newly created space between the operands with the appropriate symbol&amp;ndash;a ligature&lt;/li>
&lt;/ol>
&lt;p>We could call this functionality &amp;lsquo;Infix Readings&amp;rsquo;, although I&amp;rsquo;m not sure yet if that&amp;rsquo;s the right term for it.&lt;/p>
&lt;p>Rather than pad the space between the operator and the first operand as above, a similar effect can be achieved by displaying some sort of barrier around the first operator, thereby &amp;lsquo;detaching&amp;rsquo; it from the operands, and having a ligature appear connected to the operands by being visually closer to the operands than the first operator.&lt;/p>
&lt;p>That sounds a bit complicated. But no worries, I made mockups in the form of animated GIFs, showing what it would look like.&lt;/p>
&lt;h1 id="mockups">Mockups&lt;/h1>
&lt;p>Here&amp;rsquo;s a GIF showing (- 3 2).&lt;/p>
&lt;p>&lt;img src="https://benhsz.github.io/images/irgifs/3-2.gif" alt="- 3 2 gif">&lt;/p>
&lt;p>Of course, if there&amp;rsquo;s more operands, the editor will continue to fill the gaps with the appropriate symbol.&lt;/p>
&lt;p>&lt;img src="https://benhsz.github.io/images/irgifs/9-3-2.gif" alt="- 9 3 2 gif">&lt;/p>
&lt;p>The programmer doesn&amp;rsquo;t input those extra minuses you see in the above GIF. That&amp;rsquo;s the editor&amp;rsquo;s doing. They show up as soon as the programmer enters a space character.&lt;/p>
&lt;p>So rather than go out of your way to imagine the appropriate operator between the operands,
the editor will just, like, &lt;em>do it for you.&lt;/em>&lt;/p>
&lt;p>And while we&amp;rsquo;re using ligatures: another thing that has bothered me is the greater-than-or-equal-to operator &lt;code>&amp;gt;=&lt;/code> which looks a bit incomprehensible to me.
We can use something that looks a bit nicer instead.&lt;/p>
&lt;p>&lt;img src="https://benhsz.github.io/images/irgifs/6-4-7.gif" alt="Greater-than-or-equal-to gif">&lt;/p>
&lt;p>Prefix syntax never gave me trouble when adding or multiplying, but here&amp;rsquo;s what that would look like:&lt;/p>
&lt;p>&lt;img src="https://benhsz.github.io/images/irgifs/plusmultiply.gif" alt="Plus and multiply gif">&lt;/p>
&lt;p>I suppose you could provide options in the editor as to which operators infix readings should act upon.&lt;/p>
&lt;p>&lt;img src="https://benhsz.github.io/images/irgifs/nested.gif" alt="Nested expressions gif">&lt;/p>
&lt;p>Selecting the expressions would show that those extra operators aren&amp;rsquo;t actually &amp;lsquo;there&amp;rsquo;, i.e. not entered by the programmer&lt;/p>
&lt;p>&lt;img src="https://benhsz.github.io/images/irgifs/selection.gif" alt="Selection gif">&lt;/p>
&lt;p>Here&amp;rsquo;s what it would look like if you toggled infix readings on and off. The programmer never inputs extra space
between the operands; the editor just makes it seem that way.&lt;/p>
&lt;p>&lt;img src="https://benhsz.github.io/images/irgifs/toggle.gif" alt="Toggle gif">&lt;/p>
&lt;p>Thus everything stays compatible with existing code.&lt;br>
(And also, when working with others who may not use infix readings, to prevent any
confusion as to why the heck you keep putting two spaces in expressions when there should be only one!)&lt;/p>
&lt;p>Of course, we need to remember to do this in context, as before.
That means we need to pretend like we&amp;rsquo;re busy coding.&lt;/p>
&lt;p>So let&amp;rsquo;s see, if X is greater than Y, then&amp;hellip;&lt;/p>
&lt;p>&lt;img src="https://benhsz.github.io/images/irgifs/ifthen.gif" alt="If then gif">&lt;/p>
&lt;p>Hopefully that would help us stay on track.&lt;/p>
&lt;p>P.S. At time of writing, work has not begun to implement this feature.&lt;/p>
&lt;p>Anyone interested in implementing, copying, or modifying this proposal is free to do so.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a href="https://www.youtube.com/watch?v=4MpyHBoiTwk">https://www.youtube.com/watch?v=4MpyHBoiTwk&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item></channel></rss>